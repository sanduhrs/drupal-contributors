<?php

/**
 * @file
 * The contributors module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\contributors\ContributorService;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_entity_extra_field_info().
 */
function contributors_entity_extra_field_info() {
  $extra = array();

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->Id()]['display']['contributors'] = array(
      'label' => t('Contributors to this page'),
      'description' => t('This is my own pseudo-field'),
      'weight' => 100,
      'visible' => FALSE,
    );
    $extra['node'][$bundle->Id()]['display']['contributors_stats'] = array(
      'label' => t('Contributors stats'),
      'description' => t('This is my own pseudo-field'),
      'weight' => 100,
      'visible' => FALSE,
    );
    $extra['node'][$bundle->Id()]['display']['contributors_last_updated_by'] = array(
      'label' => t('Last updated by'),
      'description' => t('This is my own pseudo-field'),
      'weight' => 100,
      'visible' => FALSE,
    );
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function contributors_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('contributors')) {
    $variables = ContributorService::getContributors($entity);
    $build['contributors'] = [
      '#theme' => 'contributors',
      '#accounts' => $variables['accounts'],
      '#node' => $entity,
      '#attached' => array(
        'library' => array(
          'contributors/contributors',
        ),
      ),
    ];
  }
  if ($display->getComponent('contributors_stats')) {
    $variables = ContributorService::getContributors($entity);
    $build['contributors_stats'] = [
      '#theme' => 'contributors_stats',
      '#accounts' => $variables['accounts'],
      '#node' => $entity,
      '#attached' => array(
        'library' => array(
          'contributors/contributors',
        ),
      ),
    ];
  }
  if ($display->getComponent('contributors_last_updated_by')) {
    $date_formatter = \Drupal::service('date.formatter');
    $variables = ContributorService::lastUpdatedBy($entity);
    $build['contributors_last_updated_by'] = [
      '#theme' => 'contributors_last_updated_by',
      '#account' => $variables['account'],
      '#created' => $date_formatter->format($variables['timestamp']),
      '#timestamp' => $variables['timestamp'],
      '#node' => $entity,
      '#attached' => array(
        'library' => array(
          'contributors/contributors',
        ),
      ),
    ];
  }
}

/**
 * Implements hook_theme().
 */
function contributors_theme($existing, $type, $theme, $path) {
  return array(
    'contributors' => array(
      'template' => 'contributors',
      'variables' => array(
        'accounts' => NULL,
        'entity' => NULL,
      ),
    ),
    'contributors_stats' => array(
      'template' => 'contributors-stats',
      'variables' => array(
        'accounts' => NULL,
        'entity' => NULL,
      ),
    ),
    'contributors_last_updated_by' => array(
      'template' => 'contributors-last-updated-by',
      'variables' => array(
        'account' => NULL,
        'created' => NULL,
        'entity' => NULL,
        'timestamp' => NULL,
      ),
    ),
  );
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_contributors_last_updated_by(&$variables) {
  $account = $variables['account'];
  $variables['username'] = $account->getDisplayName();
}
